buildscript {
    ext.kotlinVersion = '1.3.11'
    ext.springBootVersion = '2.1.1.RELEASE'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
    }
}

plugins {
    //id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "org.sonarqube" version "2.6.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.asciidoctor.convert'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.1.RELEASE'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
//    runtime('com.google.cloud:google-cloud-logging-logback:0.46.0-alpha')
//    compile 'com.google.cloud.sql:postgres-socket-factory:1.0.10'
    //compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.0.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: '2.0.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.0.2.RELEASE'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.24.0.RELEASE'
    compile group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '1.2.0.RELEASE'
    compile group: 'com.auth0', name: 'jwks-rsa', version: '0.3.0'
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    //compile group: 'com.github.jayield', name: 'rapper', version: '1.0.5'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.2.RELEASE'
    testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '5.0.5.RELEASE'
    //testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc', version: '2.0.1.RELEASE'
    testCompile group: 'org.springframework.restdocs', name: 'spring-restdocs-webtestclient', version: '2.0.1.RELEASE'
    testRuntime group: 'org.hsqldb', name: 'hsqldb', version: '2.4.0'

    runtimeOnly('com.h2database:h2')
    runtimeOnly('com.microsoft.sqlserver:mssql-jdbc')
    runtimeOnly('org.postgresql:postgresql')
    compile project(":web-api")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    sourceDir 'src/main/asciidoc'
    inputs.dir snippetsDir
    dependsOn test
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("com.fasterxml.jackson.annotation.JsonIgnoreProperties")
}
