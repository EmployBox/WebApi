CREATE TABLE Account (
	accountId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name TEXT not null,
	email TEXT UNIQUE NOT NULL,
	rating float(24) default(0.0),
	accountType TEXT not null,
	password NVARCHAR(100) NOT NULL,
	version rowversion,

	CHECK (rating >= 0.0 AND rating <= 10.0),
	CHECK (accountType in ('USR', 'CMP', 'MOD'))
);

go
CREATE TABLE Company (
	accountId BIGINT primary key references Account,
	yearFounded SMALLINT,
	specialization NVARCHAR(20),
	webPageUrl NVARCHAR(50),
	LogoUrl NVARCHAR(100),
	description NVARCHAR(50),
	version rowversion
);

CREATE TABLE Moderator (
	accountID BIGINT primary key references Account
);

CREATE TABLE UserAccount (
	accountId BIGINT primary key references Account,
	summary TEXT,
	PhotoUrl TEXT,
	version rowversion
);

CREATE TABLE Curriculum(
	accountId BIGINT references UserAccount,
	curriculumId BIGINT identity primary key,
	title TEXT,
  version rowversion
);

CREATE TABLE Project (
	projectId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountId BIGINT NOT NULL,
	curriculumId BIGINT NOT NULL,
	name TEXT,
	description TEXT,
	version rowversion

	FOREIGN KEY (curriculumId) REFERENCES curriculum,
	FOREIGN KEY (accountId) REFERENCES Account
);

CREATE TABLE AcademicBackground(
	academicBackgroundKey BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountId BIGINT NOT NULL,
	curriculumId BIGINT NOT NULL,
	beginDate DATETIME DEFAULT(GETDATE()),
	endDate DATETIME,
	studyArea 		TEXT,
	institution 	TEXT,
	degreeObtained 	TEXT,
	version rowversion,

	FOREIGN KEY (accountId) REFERENCES Account,
	FOREIGN KEY (curriculumId) REFERENCES curriculum(curriculumId),
	check (endDate < beginDate),
	check (degreeObtained in ('basic level 1', 'basic level 2', 'basic level 3', 'secundary', 'bachelor', 'master', 'PHD'))
);

CREATE TABLE PreviousJobs(
	previousJobId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountId BIGINT NOT NULL,
	curriculumId BIGINT NOT NULL,
	beginDate DATETIME DEFAULT(GETDATE()),
	endDate DATETIME,
	companyName TEXT,
	workload 	TEXT,
	role 		TEXT,
	version rowversion,

	FOREIGN KEY (curriculumId) REFERENCES Curriculum,
	CHECK(workLoad = 'partial' OR workLoad = 'total')
);

CREATE TABLE Local (
	Address 	TEXT primary key,
	country 	TEXT,
	zipCode 	TEXT,
    district TEXT,
    longitude real,
    latitude real,
	version rowversion
);

CREATE TABLE Job(
	jobId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  	title TEXT not null,
	accountId BIGINT ,
	schedule TEXT,
	wage INT check(wage > 0),
	[description] TEXT,
	offerBeginDate DATETIME DEFAULT(GETDATE()),
	offerEndDate DATETIME,
	offerType 	TEXT NOT NULL,
	Address 	TEXT,
	version rowversion,

	FOREIGN KEY (accountID) REFERENCES Account,
	check(offerType = 'Looking for work' OR offerType = 'Looking for Worker')
);

CREATE TABLE CurriculumExperience(
	curriculumExperienceId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountId BIGINT NOT NULL,
	curriculumId BIGINT NOT NULL,
	competence TEXT,
	years SMALLINT,
	version rowversion

	FOREIGN KEY (curriculumId) REFERENCES Curriculum,
	FOREIGN KEY (accountId) REFERENCES Account
);

CREATE TABLE JobExperience(
	jobExperienceId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	jobId BIGINT NOT NULL,
	competence TEXT,
	years SMALLINT,
	version rowversion

	FOREIGN KEY (jobId) REFERENCES Job
);

CREATE TABLE Application(
	applicationId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountId BIGINT,
	curriculumId BIGINT,
	jobId BIGINT,
	datetime datetime default(GETDATE()),
	version rowversion,

	FOREIGN KEY (accountId) REFERENCES Account,
	FOREIGN KEY (curriculumId) REFERENCES curriculum,
	FOREIGN KEY (jobId) REFERENCES Job,
);

CREATE TABLE Rating(
	accountIdFrom BIGINT,
	accountIdTo BIGINT,
	moderatorId BIGINT references Moderator,
	workLoad real DEFAULT 0.0  check ([workLoad] >= 0.0 AND [workLoad] <= 10.0),
	wage real DEFAULT 0.0 check (wage >= 0.0 AND wage <= 10.0),
	workEnviroment real DEFAULT 0.0 check (workEnviroment >= 0.0 AND workEnviroment <= 10.0),
	competence real DEFAULT 0.0 check (competence >= 0.0 AND competence <= 10.0),
	ponctuality real DEFAULT 0.0 check (ponctuality >= 0.0 AND ponctuality <= 10.0),
	assiduity real DEFAULT 0.0 check (assiduity>= 0.0 AND assiduity <= 10.0),
	demeanor real DEFAULT 0.0 check (demeanor >= 0.0 AND demeanor <= 10.0),
	version rowversion,

	FOREIGN KEY (accountIdFrom) REFERENCES Account(accountID),
	FOREIGN KEY (accountIdTo) REFERENCES Account(accountID),

	PRIMARY KEY(AccountIdFrom , AccountIdTo)
);

CREATE TABLE Chat(
	chatId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	accountIdFirst BIGINT,
	accountIdSecond BIGINT,
	version rowversion

	FOREIGN KEY (accountIdFirst) REFERENCES Account(accountID),
	FOREIGN KEY (accountIdSecond) REFERENCES Account(accountID),
	UNIQUE (AccountIdFirst, AccountIdSecond)
);


CREATE TABLE Message(
	accountId BIGINT,
	messageId BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	chatId BIGINT,
	text TEXT,
	datetime datetime default(getdate()),
	version rowversion,

	FOREIGN KEY (chatId) REFERENCES Chat(chatId) ON DELETE CASCADE,
	FOREIGN KEY (accountId) REFERENCES Account ON DELETE CASCADE
);

CREATE TABLE Comment (
	commentId BIGINT identity primary key,
	accountIdFrom BIGINT,
	accountIdDest BIGINT,
	datetime DATETIME default(getdate()),
	text TEXT,
	mainCommentId BIGINT,
	status bit,
	version rowversion

	FOREIGN KEY (accountIdFrom) REFERENCES Account(accountID),
	FOREIGN KEY (accountIdDest) REFERENCES Account(accountID),
	FOREIGN KEY (MainCommentId) REFERENCES Comment(commentId),
);

CREATE TABLE Follows (
	accountIdFollowed BIGINT references Account,
	accountIdFollower BIGINT references Account,
	version rowversion,

	primary key (accountIdFollowed, accountIdFollower)
);
GO