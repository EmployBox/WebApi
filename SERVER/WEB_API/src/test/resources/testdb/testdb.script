SET DATABASE UNIQUE NAME HSQLDB6368C38052
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST 'd41d8cd98f00b204e9800998ecf8427e'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.ACCOUNT(ACCOUNTID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,NAME VARCHAR(40) NOT NULL,EMAIL VARCHAR(25) NOT NULL,RATING DOUBLE DEFAULT 0.0,PASSWORD VARCHAR(100) NOT NULL,ACCOUNTTYPE VARCHAR(3) NOT NULL,VERSION BIGINT DEFAULT 1,UNIQUE(EMAIL),CHECK((PUBLIC.ACCOUNT.RATING>=0.0) AND (PUBLIC.ACCOUNT.RATING<=10.0)),CHECK((PUBLIC.ACCOUNT.ACCOUNTTYPE) IN (('USR'),('CMP'),('MOD'))))
ALTER TABLE PUBLIC.ACCOUNT ALTER COLUMN ACCOUNTID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.COMPANY(ACCOUNTID BIGINT PRIMARY KEY,YEARFOUNDED SMALLINT,SPECIALIZATION VARCHAR(20),WEBPAGEURL VARCHAR(50),LOGOURL VARCHAR(100),DESCRIPTION VARCHAR(50),VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
CREATE MEMORY TABLE PUBLIC.MODERATOR(ACCOUNTID BIGINT PRIMARY KEY,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
CREATE MEMORY TABLE PUBLIC.USERACCOUNT(ACCOUNTID BIGINT PRIMARY KEY,SUMMARY VARCHAR(1500),PHOTOURL VARCHAR(100),VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
CREATE MEMORY TABLE PUBLIC.CURRICULUM(ACCOUNTID BIGINT,CURRICULUMID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,TITLE VARCHAR(50),VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.USERACCOUNT(ACCOUNTID))
ALTER TABLE PUBLIC.CURRICULUM ALTER COLUMN CURRICULUMID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.PROJECT(PROJECTID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTID BIGINT NOT NULL,CURRICULUMID BIGINT NOT NULL,NAME VARCHAR(15),DESCRIPTION VARCHAR(50),VERSION BIGINT DEFAULT 1,FOREIGN KEY(CURRICULUMID) REFERENCES PUBLIC.CURRICULUM(CURRICULUMID),FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
ALTER TABLE PUBLIC.PROJECT ALTER COLUMN PROJECTID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.ACADEMICBACKGROUND(ACADEMICBACKGROUNDKEY BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTID BIGINT NOT NULL,CURRICULUMID BIGINT NOT NULL,BEGINDATE TIMESTAMP DEFAULT CURRENT_DATE,ENDDATE TIMESTAMP,STUDYAREA VARCHAR(40),INSTITUTION VARCHAR(40),DEGREEOBTAINED VARCHAR(10),VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),FOREIGN KEY(CURRICULUMID) REFERENCES PUBLIC.CURRICULUM(CURRICULUMID),CHECK(PUBLIC.ACADEMICBACKGROUND.ENDDATE<PUBLIC.ACADEMICBACKGROUND.BEGINDATE),CHECK((PUBLIC.ACADEMICBACKGROUND.DEGREEOBTAINED) IN (('basic level 1'),('basic level 2'),('basic level 3'),('secundary'),('bachelor'),('master'),('PHD'))))
ALTER TABLE PUBLIC.ACADEMICBACKGROUND ALTER COLUMN ACADEMICBACKGROUNDKEY RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.PREVIOUSJOBS(PREVIOUSJOBID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTID BIGINT NOT NULL,CURRICULUMID BIGINT NOT NULL,BEGINDATE TIMESTAMP DEFAULT CURRENT_DATE,ENDDATE TIMESTAMP,COMPANYNAME VARCHAR(20),WORKLOAD VARCHAR(20),ROLE VARCHAR(20),VERSION BIGINT DEFAULT 1,FOREIGN KEY(CURRICULUMID) REFERENCES PUBLIC.CURRICULUM(CURRICULUMID),CHECK((PUBLIC.PREVIOUSJOBS.WORKLOAD='partial') OR (PUBLIC.PREVIOUSJOBS.WORKLOAD='total')))
ALTER TABLE PUBLIC.PREVIOUSJOBS ALTER COLUMN PREVIOUSJOBID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.LOCAL(ADDRESS VARCHAR(50) PRIMARY KEY,COUNTRY VARCHAR(15),ZIPCODE VARCHAR(40),DISTRICT VARCHAR(40),LONGITUDE DOUBLE,LATITUDE DOUBLE,VERSION BIGINT DEFAULT 1)
CREATE MEMORY TABLE PUBLIC.JOB(JOBID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,TITLE VARCHAR(50) NOT NULL,ACCOUNTID BIGINT,TYPE VARCHAR(50),WAGE INTEGER,DESCRIPTION VARCHAR(50),OFFERBEGINDATE TIMESTAMP DEFAULT CURRENT_DATE,OFFERENDDATE TIMESTAMP,OFFERTYPE VARCHAR(30) NOT NULL,ADDRESS VARCHAR(50),VERSION BIGINT DEFAULT 1,CHECK(PUBLIC.JOB.WAGE>0),FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),CHECK((PUBLIC.JOB.OFFERTYPE='Looking for work') OR (PUBLIC.JOB.OFFERTYPE='Looking for Worker')))
ALTER TABLE PUBLIC.JOB ALTER COLUMN JOBID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.CURRICULUMEXPERIENCE(CURRICULUMEXPERIENCEID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTID BIGINT NOT NULL,CURRICULUMID BIGINT NOT NULL,COMPETENCE VARCHAR(50),YEARS SMALLINT,VERSION BIGINT DEFAULT 1,FOREIGN KEY(CURRICULUMID) REFERENCES PUBLIC.CURRICULUM(CURRICULUMID),FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
ALTER TABLE PUBLIC.CURRICULUMEXPERIENCE ALTER COLUMN CURRICULUMEXPERIENCEID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.JOBEXPERIENCE(JOBEXPERIENCEID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,JOBID BIGINT NOT NULL,COMPETENCE VARCHAR(50),YEARS SMALLINT,VERSION BIGINT DEFAULT 1,FOREIGN KEY(JOBID) REFERENCES PUBLIC.JOB(JOBID))
ALTER TABLE PUBLIC.JOBEXPERIENCE ALTER COLUMN JOBEXPERIENCEID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.APPLICATION(APPLICATIONID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTID BIGINT,CURRICULUMID BIGINT,JOBID BIGINT,DATETIME TIMESTAMP DEFAULT CURRENT_DATE,VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),FOREIGN KEY(CURRICULUMID) REFERENCES PUBLIC.CURRICULUM(CURRICULUMID),FOREIGN KEY(JOBID) REFERENCES PUBLIC.JOB(JOBID))
ALTER TABLE PUBLIC.APPLICATION ALTER COLUMN APPLICATIONID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.RATING(ACCOUNTIDFROM BIGINT,ACCOUNTIDTO BIGINT,MODERATORID BIGINT,WORKLOAD DOUBLE DEFAULT 0.0,WAGE DOUBLE DEFAULT 0.0,WORKENVIROMENT DOUBLE DEFAULT 0.0,COMPETENCE DOUBLE DEFAULT 0.0,PONCTUALITY DOUBLE DEFAULT 0.0,ASSIDUITY DOUBLE DEFAULT 0.0,DEMEANOR DOUBLE DEFAULT 0.0,VERSION BIGINT DEFAULT 1,PRIMARY KEY(ACCOUNTIDFROM,ACCOUNTIDTO),FOREIGN KEY(MODERATORID) REFERENCES PUBLIC.MODERATOR(ACCOUNTID),CHECK((PUBLIC.RATING.WORKLOAD>=0.0) AND (PUBLIC.RATING.WORKLOAD<=10.0)),CHECK((PUBLIC.RATING.WAGE>=0.0) AND (PUBLIC.RATING.WAGE<=10.0)),CHECK((PUBLIC.RATING.WORKENVIROMENT>=0.0) AND (PUBLIC.RATING.WORKENVIROMENT<=10.0)),CHECK((PUBLIC.RATING.COMPETENCE>=0.0) AND (PUBLIC.RATING.COMPETENCE<=10.0)),CHECK((PUBLIC.RATING.PONCTUALITY>=0.0) AND (PUBLIC.RATING.PONCTUALITY<=10.0)),CHECK((PUBLIC.RATING.ASSIDUITY>=0.0) AND (PUBLIC.RATING.ASSIDUITY<=10.0)),CHECK((PUBLIC.RATING.DEMEANOR>=0.0) AND (PUBLIC.RATING.DEMEANOR<=10.0)),FOREIGN KEY(ACCOUNTIDFROM) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),FOREIGN KEY(ACCOUNTIDTO) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
CREATE MEMORY TABLE PUBLIC.CHAT(CHATID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTIDFIRST BIGINT,ACCOUNTIDSECOND BIGINT,VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTIDFIRST) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),FOREIGN KEY(ACCOUNTIDSECOND) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),UNIQUE(ACCOUNTIDFIRST,ACCOUNTIDSECOND))
ALTER TABLE PUBLIC.CHAT ALTER COLUMN CHATID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.MESSAGE(ACCOUNTID BIGINT,MESSAGEID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,CHATID BIGINT,TEXT VARCHAR(200),DATETIME TIMESTAMP DEFAULT SYSDATE,VERSION BIGINT DEFAULT 1,FOREIGN KEY(CHATID) REFERENCES PUBLIC.CHAT(CHATID) ON DELETE CASCADE,FOREIGN KEY(ACCOUNTID) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID) ON DELETE CASCADE)
ALTER TABLE PUBLIC.MESSAGE ALTER COLUMN MESSAGEID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.COMMENT(COMMENTID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ACCOUNTIDFROM BIGINT,ACCOUNTIDDEST BIGINT,DATETIME DATE DEFAULT CURRENT_DATE,TEXT VARCHAR(300),MAINCOMMENTID BIGINT,STATUS BIT(1),VERSION BIGINT DEFAULT 1,FOREIGN KEY(ACCOUNTIDFROM) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID) ON DELETE CASCADE,FOREIGN KEY(ACCOUNTIDDEST) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID) ON DELETE CASCADE,FOREIGN KEY(MAINCOMMENTID) REFERENCES PUBLIC.COMMENT(COMMENTID) ON DELETE CASCADE)
ALTER TABLE PUBLIC.COMMENT ALTER COLUMN COMMENTID RESTART WITH 0
CREATE MEMORY TABLE PUBLIC.FOLLOWS(ACCOUNTIDFOLLOWED BIGINT,ACCOUNTIDFOLLOWER BIGINT,VERSION BIGINT DEFAULT 1,PRIMARY KEY(ACCOUNTIDFOLLOWED,ACCOUNTIDFOLLOWER),FOREIGN KEY(ACCOUNTIDFOLLOWED) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID),FOREIGN KEY(ACCOUNTIDFOLLOWER) REFERENCES PUBLIC.ACCOUNT(ACCOUNTID))
CREATE MEMORY TABLE PUBLIC.SCHEDULE(SCHEDULEID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,JOBID BIGINT,REPEATS VARCHAR(25),DATE TIMESTAMP,STARTHOUR TIMESTAMP,ENDHOUR TIMESTAMP,VERSION BIGINT DEFAULT 1,FOREIGN KEY(JOBID) REFERENCES PUBLIC.JOB(JOBID))
ALTER TABLE PUBLIC.SCHEDULE ALTER COLUMN SCHEDULEID RESTART WITH 0
CREATE PROCEDURE PUBLIC.POPULATEDB() SPECIFIC POPULATEDB_10622 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DECLARE ACCOUNT_ID1,ACCOUNT_ID2,ACCOUNT_ID3,ACCOUNT_ID4,ACCOUNT_ID5,ACCOUNT_ID6,COMPANY_ID1,COMPANY_ID2,JOB_ID,JOB_ID2,JOB_ID3,CURRICULUM_ID BIGINT;INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE,RATING)VALUES('Bruno','teste@gmail.com','password','USR',2.0);SET ACCOUNT_ID1=IDENTITY();INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE,RATING)VALUES('Maria','lol@hotmail.com','teste123','USR',4.0);SET ACCOUNT_ID2=IDENTITY();INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE,RATING)VALUES('Carlos','carlos@gmail.com','password','USR',2.5);SET ACCOUNT_ID3=IDENTITY();INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE,RATING)VALUES('D\u00e1rio','dario@hotmail.com','teste123','USR',3.1);SET ACCOUNT_ID4=IDENTITY();INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE,RATING)VALUES('Zacarias','zacarias@gmail.com','password','USR',2.1);SET ACCOUNT_ID5=IDENTITY();INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE,RATING)VALUES('Ana','ana@hotmail.com','teste123','USR',4.6);SET ACCOUNT_ID6=IDENTITY();INSERT INTO PUBLIC.USERACCOUNT(ACCOUNTID)VALUES(ACCOUNT_ID1);INSERT INTO PUBLIC.USERACCOUNT(ACCOUNTID)VALUES(ACCOUNT_ID2);INSERT INTO PUBLIC.USERACCOUNT(ACCOUNTID)VALUES(ACCOUNT_ID3);INSERT INTO PUBLIC.USERACCOUNT(ACCOUNTID)VALUES(ACCOUNT_ID4);INSERT INTO PUBLIC.USERACCOUNT(ACCOUNTID)VALUES(ACCOUNT_ID5);INSERT INTO PUBLIC.USERACCOUNT(ACCOUNTID)VALUES(ACCOUNT_ID6);INSERT INTO PUBLIC.CURRICULUM(ACCOUNTID,TITLE)VALUES(ACCOUNT_ID1,'Engenharia Civil');SET CURRICULUM_ID=IDENTITY();INSERT INTO PUBLIC.ACADEMICBACKGROUND(ACCOUNTID,CURRICULUMID,INSTITUTION)VALUES(ACCOUNT_ID1,CURRICULUM_ID,'ISEL');INSERT INTO PUBLIC.PROJECT(ACCOUNTID,CURRICULUMID,NAME,DESCRIPTION)VALUES(ACCOUNT_ID1,CURRICULUM_ID,'project1','project one');INSERT INTO PUBLIC.CURRICULUMEXPERIENCE(ACCOUNTID,CURRICULUMID,COMPETENCE,YEARS)VALUES(ACCOUNT_ID1,CURRICULUM_ID,'Knows to do stuff',1);INSERT INTO PUBLIC.PREVIOUSJOBS(ACCOUNTID,CURRICULUMID,COMPANYNAME,WORKLOAD,ROLE)VALUES(ACCOUNT_ID1,CURRICULUM_ID,'ISEL','partial','TEACHER');INSERT INTO PUBLIC.RATING(ACCOUNTIDFROM,ACCOUNTIDTO)VALUES(ACCOUNT_ID1,ACCOUNT_ID2);INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE)VALUES('company1','company1@gmail.com','741','CMP');SET COMPANY_ID1=IDENTITY();INSERT INTO PUBLIC.ACCOUNT(NAME,EMAIL,PASSWORD,ACCOUNTTYPE)VALUES('company2','company2@gmail.com','567','CMP');SET COMPANY_ID2=IDENTITY();INSERT INTO PUBLIC.COMPANY(ACCOUNTID)VALUES(COMPANY_ID1);INSERT INTO PUBLIC.COMPANY(ACCOUNTID)VALUES(COMPANY_ID2);INSERT INTO PUBLIC.JOB(TITLE,ACCOUNTID,WAGE,DESCRIPTION,OFFERTYPE)VALUES('Great Job',ACCOUNT_ID1,1000,'Sou uma oferta simpatica','Looking for work');SET JOB_ID=IDENTITY();INSERT INTO PUBLIC.JOB(TITLE,ACCOUNTID,WAGE,DESCRIPTION,OFFERTYPE)VALUES('Not so Great Job',ACCOUNT_ID2,100,'Sou uma moderadamente oferta simpatica','Looking for work');SET JOB_ID2=IDENTITY();INSERT INTO PUBLIC.JOB(TITLE,ACCOUNTID,WAGE,DESCRIPTION,OFFERTYPE)VALUES('Bad Job',ACCOUNT_ID3,10,'Sou uma oferta meh','Looking for work');SET JOB_ID3=IDENTITY();INSERT INTO PUBLIC.COMMENT(ACCOUNTIDFROM,ACCOUNTIDDEST,TEXT,STATUS)VALUES(ACCOUNT_ID1,ACCOUNT_ID2,'FIRST COMMENT',0);INSERT INTO PUBLIC.JOBEXPERIENCE(JOBID,COMPETENCE,YEARS)VALUES(JOB_ID,'Java',3);INSERT INTO PUBLIC.APPLICATION(ACCOUNTID,JOBID)VALUES(ACCOUNT_ID2,JOB_ID);INSERT INTO PUBLIC.FOLLOWS(ACCOUNTIDFOLLOWER,ACCOUNTIDFOLLOWED)VALUES(ACCOUNT_ID1,ACCOUNT_ID2);INSERT INTO PUBLIC.FOLLOWS(ACCOUNTIDFOLLOWER,ACCOUNTIDFOLLOWED)VALUES(ACCOUNT_ID1,COMPANY_ID1);INSERT INTO PUBLIC.FOLLOWS(ACCOUNTIDFOLLOWER,ACCOUNTIDFOLLOWED)VALUES(ACCOUNT_ID2,COMPANY_ID1);INSERT INTO PUBLIC.SCHEDULE(JOBID)VALUES(JOB_ID);INSERT INTO PUBLIC.SCHEDULE(JOBID)VALUES(JOB_ID2);END
CREATE PROCEDURE PUBLIC.DELETEDB() SPECIFIC DELETEDB_10623 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC DELETE FROM PUBLIC.SCHEDULE;DELETE FROM PUBLIC.ACADEMICBACKGROUND;DELETE FROM PUBLIC.PROJECT;DELETE FROM PUBLIC.PREVIOUSJOBS;DELETE FROM PUBLIC.CURRICULUMEXPERIENCE;DELETE FROM PUBLIC.CURRICULUM;DELETE FROM PUBLIC.COMMENT;DELETE FROM PUBLIC.FOLLOWS;DELETE FROM PUBLIC.RATING;DELETE FROM PUBLIC.MESSAGE;DELETE FROM PUBLIC.CHAT;DELETE FROM PUBLIC.JOBEXPERIENCE;DELETE FROM PUBLIC.LOCAL;DELETE FROM PUBLIC.APPLICATION;DELETE FROM PUBLIC.MODERATOR;DELETE FROM PUBLIC.COMPANY;DELETE FROM PUBLIC.JOB;DELETE FROM PUBLIC.USERACCOUNT;DELETE FROM PUBLIC.ACCOUNT;END
SET SCHEMA PUBLIC
CREATE TRIGGER PUBLIC.ACCOUNT_TRIGGER BEFORE UPDATE ON PUBLIC.ACCOUNT REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.COMPANY_TRIGGER BEFORE UPDATE ON PUBLIC.COMPANY REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.USER_TRIGGER BEFORE UPDATE ON PUBLIC.USERACCOUNT REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.CURRICULUM_TRIGGER BEFORE UPDATE ON PUBLIC.CURRICULUM REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.PROJECT_TRIGGER BEFORE UPDATE ON PUBLIC.PROJECT REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.ACADEMICBACKGROUND_TRIGGER BEFORE UPDATE ON PUBLIC.ACADEMICBACKGROUND REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.PREVIOUSJOBS_TRIGGER BEFORE UPDATE ON PUBLIC.PREVIOUSJOBS REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.LOCAL_TRIGGER BEFORE UPDATE ON PUBLIC.LOCAL REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.JOB_TRIGGER BEFORE UPDATE ON PUBLIC.JOB REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.CURRICULUMEXPERIENCE_TRIGGER BEFORE UPDATE ON PUBLIC.CURRICULUMEXPERIENCE REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.JOBEXPERIENCE_TRIGGER BEFORE UPDATE ON PUBLIC.JOBEXPERIENCE REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.APPLICATION_TRIGGER BEFORE UPDATE ON PUBLIC.APPLICATION REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.RATING_TRIGGER BEFORE UPDATE ON PUBLIC.RATING REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.CHAT_TRIGGER BEFORE UPDATE ON PUBLIC.CHAT REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.MESSAGE_TRIGGER BEFORE UPDATE ON PUBLIC.MESSAGE REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.COMMENT_TRIGGER BEFORE UPDATE ON PUBLIC.COMMENT REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.FOLLOWS_TRIGGER BEFORE UPDATE ON PUBLIC.FOLLOWS REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
CREATE TRIGGER PUBLIC.SCHEDULE_TRIGGER BEFORE UPDATE ON PUBLIC.SCHEDULE REFERENCING OLD ROW AS OLD NEW ROW AS NEW FOR EACH ROW BEGIN ATOMIC BEGIN ATOMIC SET NEW.VERSION=OLD.VERSION+1;END;END
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
